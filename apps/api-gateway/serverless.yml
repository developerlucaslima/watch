service: api-gateway

provider:
  name: aws
  runtime: nodejs20.x
  architecture: arm64
  region: ${env:AWS_REGION}
  stage: ${opt:stage, 'dev'}
  stackName: ${self:service}-${opt:stage, 'dev'}
  timeout: 20
  logRetentionInDays: 7
  tracing:
    lambda: true
  environment:
    NODE_ENV: ${env:NODE_ENV}
    JWT_SECRET: ${env:JWT_SECRET}
    ORIGIN_URL: ${env:ORIGIN_URL}
    AWS_ACCOUNT_ID: ${env:AWS_ACCOUNT_ID}
    SQS_QUEUE_URL: ${env:SQS_QUEUE_URL}
    DATABASE_URL: ${env:DATABASE_URL}
    NODE_OPTIONS: --enable-source-maps

functions:
  api:
    handler: src/lambda.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: ${env:ORIGIN_URL}
            headers:
              - Content-Type
              - Authorization
            methods:
              - GET
              - POST
              - PUT
              - DELETE
              - PATCH
              - OPTIONS
            allowCredentials: true
            package:
    patterns:
      - node_modules/.prisma/client/libquery_engine-linux-arm64-openssl-3.0.x.so.node
      - node_modules/@prisma/client/**
      - node_modules/.prisma/**

package:
  individually: true
  excludeDevDependencies: true
  patterns:
    # ❌ Exclude all query engines
    - '!node_modules/.prisma/client/libquery_engine*'

    # ✅ Re-include ONLY the required engine (must be after exclusion!)
    - node_modules/.prisma/client/libquery_engine-linux-arm64-openssl-3.0.x.so.node

    # ✅ Include necessary Prisma artifacts
    - node_modules/@prisma/client/**
    - node_modules/.prisma/**

    # ❌ Cleanup
    - '!**/.git/**'
    - '!**/.vscode/**'
    - '!**/node_modules/.cache/**'

